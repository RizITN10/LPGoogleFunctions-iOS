#LPGoogleFunctions

LPGoogleFunctions is library for iOS developers with Google API functions.
https://developers.google.com/

Created by Luka Penger
http://lukapenger.eu

##ARC

LPGoogleFunctions uses ARC (Automatic Reference Counting).

If you are using LPGoogleFunctions in your non-arc project, you will need to set a `-fobjc-arc` compiler flag on all of the LPGoogleFunctions source files.

To set a compiler flag in Xcode, go to your active target and select the "Build Phases" tab. Now select all LPGoogleFunctions source files, press Enter, insert `-fobjc-arc` and then "Done" to disable ARC for LPGoogleFunctions.

##Directions service

The Google Directions API is a service that calculates directions between locations using an HTTP request. You can search for directions for several modes of transportation, include transit, driving, walking or cycling. Directions may specify origins, destinations and waypoints either as text strings (e.g. "Chicago, IL" or "Darwin, NT, Australia") or as latitude/longitude coordinates. The Directions API can return multi-part directions using a series of waypoints.

**Parameters:**

* **Origin** - The latitude/longitude value from which you wish to calculate directions.
* **Destination** - The latitude/longitude value from which you wish to calculate directions.
* **Travel Mode** - Specifies the mode of transport to use when calculating directions. If you set the mode to "transit" you must also specify either a departure_time or an arrival_time.
* **Avoid Tolls** - Indicates that the calculated route(s) should avoid the indicated features.
* **Unit** - Specifies the unit system to use when displaying results.
* **Alternatives** - If set to true, specifies that the Directions service may provide more than one route alternative in the response. Note that providing route alternatives may increase the response time from the server.
* **Departure time**.
* **Arrival time**.

```objective-c
- (void)loadDirectionsForOrigin:(LPLocation*)origin forDestination:(LPLocation*)destination 
	directionsTravelMode:(LPGoogleDirectionsTravelMode)travelMode directionsAvoidTolls:(LPGoogleDirectionsAvoid)avoid 
	directionsUnit:(LPGoogleDirectionsUnit)unit directionsAlternatives:(BOOL)alternatives 
	departure_time:(NSDate*)departure_time arrival_time:(NSDate*)arrival_time 
	waypoints:(NSArray*)waypoints successfulBlock:(void (^)(LPDirections* directions))successful
	failureBlock:(void (^)(LPGoogleStatus status))failure;
```

You can use blocks or delegate methods:

```objective-c
- (void)googleFunctionsWillLoadDirections:(LPGoogleFunctions*)googleFunctions;
- (void)googleFunctions:(LPGoogleFunctions *)googleFunctions didLoadDirections:(LPDirections*)directions;
- (void)googleFunctions:(LPGoogleFunctions*)googleFunctions errorLoadingDirectionsWithStatus:(LPGoogleStatus)status;
```

##Street View Images

The Google Maps Image APIs make it easy to embed a street view image into your image view.

**Parameters:**

* **Location** - The location (such as 40.457375,-80.009353).
or
* **Address** - The address (such as Chagrin Falls, OH).

* **Image Size** - Specifies the output size of the image in pixels.
* **Heading** - Indicates the compass heading of the camera. Accepted values are from 0 to 360 (both values indicating North, with 90 indicating East, and 180 South). If no heading is specified, a value will be calculated that directs the camera towards the specified location, from the point at which the closest photograph was taken.
* **Fov** - Determines the horizontal field of view of the image. The field of view is expressed in degrees, with a maximum allowed value of 120. When dealing with a fixed-size viewport, as with a Street View image of a set size, field of view in essence represents zoom, with smaller numbers indicating a higher level of zoom.
* **Pitch** - Specifies the up or down angle of the camera relative to the Street View vehicle. This is often, but not always, flat horizontal. Positive values angle the camera up (with 90 degrees indicating straight up); negative values angle the camera down (with -90 indicating straight down).

Method for location:
```objective-c
- (void)loadStreetViewImageForLocation:(LPLocation*)location imageSize:(CGSize)size 
	heading:(float)heading fov:(float)fov pitch:(float)pitch successfulBlock:(void (^)(UIImage *image))successful 
	failureBlock:(void (^)(NSError *error))failure;
```

Method for address:
```objective-c
- (void)loadStreetViewImageForAddress:(NSString*)address imageSize:(CGSize)size heading:(float)heading 
	fov:(float)fov pitch:(float)pitch successfulBlock:(void (^)(UIImage *image))successful 
	failureBlock:(void (^)(NSError *error))failure;
```

##Static Map Images

The Google Maps Image APIs make it easy to embed a static Google Maps image into your image view.




##Using Frameworks - Libraries:

* UIKit.framework
* Foundation.framework
* CoreLocation.framework
* AVFoundation.framework

LPGoogleFunctions using AFNetworking library for networking.
https://github.com/AFNetworking/AFNetworking

##License

This code is distributed under the terms and conditions of the [MIT license](LICENSE). 

##Change log

A brief summary of each LPGoogleFunctions release can be found on the [wiki](https://github.com/luka1995/LPGoogleFunctions/wiki/Change-log).